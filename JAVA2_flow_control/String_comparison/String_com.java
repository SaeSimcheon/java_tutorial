// primitive boolean / int double shor long float char == primitive 즉, 원시타입
// 나머지는 non primitve 임

// 자바는 이 둘을 차이를 두고 다룸

// code name value

// int p1 = 1 메모리상 어디가에 값이 저장
// p1이라는 이름의 변수가 1 위치라는 곳을 가리킴
// p2를 1을 저장한다면 또 p2도 1의 위치를 가리킴
// 이때 p1 == p2 냐? 라고 물으면 참 , 같은 곳을 가리키고 있냐?
// 원시데이터 타입은 이게 가능함

// String은 원시 타입이 아니었었지


// String o1 = new String("java);
// String o2 = new String("java);

// 자바에서는 이 둘을 좀 다르게 처리함

// 만약 o2 처럼 new를 이용해서 만들었다. 이미 java가 o1 이 가지고 있는데도 불구하고 java를 새로 만듦

// 같은 '장소'에 있지 않기 때문에 false 가 됨.

// 원시 타입이 아닌 데이터 타입들은 대부분 equals를 갖고 있음.

// 내용이 같다면 true가 반환 되도록

// equals는 내용이 같냐라는 취지임
// 같은 곳은 ==

// 원시 데이터는 == / 원시 데이터 타입이 아닌 것은 equals를 쓰자

// 문자열은 워낙 자주쓰여서 편의성 성능에서 편의

// String o3 = "java2"
// String o4 = "java2"
// 마치 원시 데이터인 것처럼 동작함

// 문자열의 경우에는 == 가능

// 그런데 입력값 인자를 받을때 동등비교를 적용했을때 false가 나왔다는 것은
// 입력 값이 다른 곳에 저장되었다는 의미로 생각해야함

// 원시데이터 타입이 아니면 그냥 equals 써버리자 -> 문제가 없으므로

